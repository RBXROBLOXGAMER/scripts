{
  "global environment": {
      "queue_on_teleport": {
          "label": "queue_on_teleport(code);",
          "type": "Method",
          "description": "Executes code after player is teleported.",
          "insert": "queue_on_teleport"
      },
      "setsimulationradius": {
          "label": "setsimulationradius(min,max);",
          "type": "Method",
          "description": "Sets the players simulation radius.",
          "insert": "setsimulationradius"
      },
      "gethwid": {
          "label": "gethwid();",
          "type": "Method",
          "description": "Returns the User's HWID, changes between PCs.",
          "insert": "gethwid"
      },
      "getinstances": {
          "label": "getinstances();",
          "type": "Method",
          "description": "Returns a list of all instances within the game.",
          "insert": "getinstances"
      },
      "checkcaller": {
          "label": "checkcaller();",
          "type": "Method",
          "description": "Gets the script that is calling this function.",
          "insert": "checkcaller"
      },
      "fireproximityprompt": {
          "label": "fireproximityprompt(ProximityPrompt);",
          "type": "Method",
          "description": "Fakes a .ProximityPrompt event to interact with a part.",
          "insert": "fireproximityprompt"
      },
      "firetouchinterest": {
          "label": "firetouchinterest(Part, ToTouch, Toggle);",
          "type": "Method",
          "description": "Fakes a .Touched event to interact with a part.\nThe Toggle argument must be either 0 or 1 (for fire/un-fire).",
          "insert": "firetouchinterest"
      },
      "getrenv": {
          "label": "getrenv();",
          "type": "Method",
          "description": "Returns the global environment for the LocalScript state.",
          "insert": "getrenv"
      },
      "newcclosure": {
          "label": "newcclosure(lclosure);",
          "type": "Method",
          "description": "Takes a Lua function (lclosure) and returns a new C function (cclosure).",
          "insert": "newcclosure"
      },
      "request": {
          "label": "request(options);",
          "type": "Method",
          "description": "Sends an HTTP request with specified options.",
          "insert": "request"
      },
      "readfile": {
          "label": "readfile(file);",
          "type": "Method",
          "description": "Returns the content of a file.",
          "insert": "readfile"
      },
      "loadstring": {
          "label": "loadstring(chunk, chunk_name);",
          "type": "Method",
          "description": "Loads a chunk of code as a Lua function.",
          "insert": "loadstring"
      },
      "mousescroll": {
          "label": "mousescroll(px);",
          "type": "Method",
          "description": "Simulates scrolling the mouse wheel by pixels.",
          "insert": "mousescroll"
      },
      "listfiles": {
          "label": "listfiles(folder);",
          "type": "Method",
          "description": "Returns a table of files in a specified folder.",
          "insert": "listfiles"
      },
      "keyrelease": {
          "label": "keyrelease();",
          "type": "Method",
          "description": "Releases a key on the keyboard.",
          "insert": "keyrelease"
      },
      "mouse1release": {
          "label": "mouse1release();",
          "type": "Method",
          "description": "Simulates releasing the left mouse button.",
          "insert": "mouse1release"
      },
      "getnilinstances": {
          "label": "getnilinstances();",
          "type": "Method",
          "description": "Returns all nil instances in the game.",
          "insert": "getnilinstances"
      },
      "islclosure": {
          "label": "islclosure(f);",
          "type": "Method",
          "description": "Checks if a function is a Lua closure.",
          "insert": "islclosure"
      },
      "mouse1click": {
          "label": "mouse1click();",
          "type": "Method",
          "description": "Simulates clicking the left mouse button once.",
          "insert": "mouse1click"
      },
      "mouse2press": {
          "label": "mouse2press();",
          "type": "Method",
          "description": "Simulates pressing the right mouse button.",
          "insert": "mouse2press"
      },
      "saveinstance": {
          "label": "saveinstance();",
          "type": "Method",
          "description": "Saves the game as a Roblox Studio file.",
          "insert": "saveinstance"
      },
      "getgenv": {
          "label": "getgenv();",
          "type": "Method",
          "description": "Returns the environment applied to each script run by Solara.",
          "insert": "getgenv"
      },
      "mousemoverel": {
          "label": "mousemoverel(x, y);",
          "type": "Method",
          "description": "Moves the mouse relative to its current position.",
          "insert": "mousemoverel"
      },
      "iscclosure": {
          "label": "iscclosure(closure);",
          "type": "Method",
          "description": "Checks if a function is a C closure.",
          "insert": "iscclosure"
      },
      "keypress": {
          "label": "keypress(keycode);",
          "type": "Method",
          "description": "Continuously presses a key until released.",
          "insert": "keypress"
      },
      "setfpscap": {
          "label": "setfpscap();",
          "type": "Method",
          "description": "Sets Roblox's FPS cap.",
          "insert": "setfpscap"
      },
      "mouse1press": {
          "label": "mouse1press();",
          "type": "Method",
          "description": "Simulates pressing the left mouse button.",
          "insert": "mouse1press"
      },
      "isrbxactive": {
          "label": "isrbxactive();",
          "type": "Method",
          "description": "Checks if Roblox is focused.",
          "insert": "isrbxactive"
      },
      "getconnections": {
          "label": "getconnections(event);",
          "type": "Method",
          "description": "Returns functions connected to an event.",
          "insert": "getconnections"
      },
      "fireclickdetector": {
          "label": "fireclickdetector(d);",
          "type": "Method",
          "description": "Simulates clicking a ClickDetector.",
          "insert": "fireclickdetector"
      },
      "mouse2release": {
          "label": "mouse2release();",
          "type": "Method",
          "description": "Simulates releasing the right mouse button.",
          "insert": "mouse2release"
      },
      "getrawmetatable": {
          "label": "getrawmetatable(t);",
          "type": "Method",
          "description": "Gets the metatable of a table or userdata.",
          "insert": "getrawmetatable"
      },
      "isreadonly": {
          "label": "isreadonly(t);",
          "type": "Method",
          "description": "Checks if a table is read-only.",
          "insert": "isreadonly"
      },
      "mouse2click": {
          "label": "mouse2click();",
          "type": "Method",
          "description": "Simulates clicking the right mouse button once.",
          "insert": "mouse2click"
      },
      "writefile": {
          "label": "writefile(filename, data);",
          "type": "Method",
          "description": "Writes data to a file in the workspace folder.",
          "insert": "writefile"
      },
      "setclipboard": {
          "label": "setclipboard(data);",
          "type": "Method",
          "description": "Copies data to the clipboard.",
          "insert": "setclipboard"
      }
  },
  "debug_library": {
      "debug.getmetatable": {
          "label": "debug.getmetatable(val);",
          "type": "Method",
          "description": "Retrieves the metatable of a value regardless of __metatable field.",
          "insert": "debug.getmetatable"
      },
      "debug.profileend": {
          "label": "debug.profileend();",
          "type": "Method",
          "description": "Stops a profiler started with debug.profilebegin.",
          "insert": "debug.profileend"
      },
      "debug.profilebegin": {
          "label": "debug.profilebegin(label);",
          "type": "Method",
          "description": "Starts a profiler under a specified label.",
          "insert": "debug.profilebegin"
      },
      "debug.traceback": {
          "label": "debug.traceback(message, level);",
          "type": "Method",
          "description": "Returns a string with a traceback of the call stack.",
          "insert": "debug.traceback"
      },
      "debug.getinfo": {
          "label": "debug.getinfo(f);",
          "type": "Method",
          "description": "Returns information about a function.",
          "insert": "debug.getinfo"
      }
  },
  "drawing_library": {
      "Drawing.new": {
          "label": "Drawing.new(type);",
          "type": "Method",
          "description": "Creates a new drawing object of a specified type.",
          "insert": "Drawing.new"
      } 
  }
}
